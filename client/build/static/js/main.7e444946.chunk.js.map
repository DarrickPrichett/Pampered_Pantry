{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","components/RecipeItem/index.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/queries.js","components/RecipeList/index.js","components/CategoryMenu/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","RecipeItem","item","image","name","quantity","className","to","alt","src","count","pluralize","reducer","state","action","type","recipes","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","QUERY_RECIPES","gql","QUERY_CATEGORIES","RecipeList","useQuery","loading","data","useEffect","forEach","recipe","then","length","filter","category","map","key","price","spinner","CategoryMenu","categoryData","onClick","id","Home","Detail","useParams","useState","currentRecipe","setCurrentRecipe","find","product","indexedRecipes","description","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","role","aria-label","LOGIN","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","Auth","handleChange","target","onSubmit","htmlFor","placeholder","onChange","Signup","addUser","firstName","lastName","Nav","loggedIn","href","logout","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e444946.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('recipes', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n// import { useStoreContext } from \"../../utils/GlobalState\"\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction RecipeItem(item) {\n  // const [state, dispatch] = useStoreContext();\n\n  const {\n    image,\n    name,\n    _id,\n    quantity\n  } = item;\n\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/recipes/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default RecipeItem;\n","import { useReducer } from \"react\";\nimport { // update with recipe actions\n  UPDATE_RECIPES,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_RECIPES:\n      return {\n        ...state,\n        recipes: [...action.recipes],\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport function useRecipeReducer(initialState) {\n  return useReducer(reducer, initialState)\n}","export const UPDATE_RECIPES = \"UPDATE_RECIPES\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React, { createContext, useContext } from \"react\";\nimport { useRecipeReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useRecipeReducer({\n    recipes: [],\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","import { gql } from '@apollo/client';\n//adust file later when models are set\nexport const QUERY_RECIPES = gql`\n  query getProducts($category: ID) {\n    recipes(category: $category) {\n      _id\n      name\n      description\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_RECIPES = gql`\n  {\n    recipes {\n      _id\n      name\n      description\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        recipes {\n          _id\n          name\n          description\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport RecipeItem from '../RecipeItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_RECIPES } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_RECIPES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\n\nfunction RecipeList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_RECIPES);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_RECIPES,\n        recipes: data.recipes,\n      });\n      data.recipes.forEach((recipe) => {\n        idbPromise('recipes', 'put', recipe);\n      });\n    } else if (!loading) {\n      idbPromise('recipes', 'get').then((recipes) => {\n        dispatch({\n          type: UPDATE_RECIPES,\n          recipes: recipes,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterRecipes() {\n    if (!currentCategory) {\n      return state.recipes;\n    }\n\n    return state.recipes.filter(\n      (recipe) => recipe.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Recipes:</h2>\n      {state.recipes.length ? (\n        <div className=\"flex-row\">\n          {filterRecipes().map((recipe) => (\n            <RecipeItem\n              key={recipe._id}\n              _id={recipe._id}\n              image={recipe.image}\n              name={recipe.name}\n              price={recipe.price}\n              quantity={recipe.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any recipes yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default RecipeList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\nimport RecipeList from \"../components/RecipeList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\n\nconst Home = () => {\n  return (\n    <div className='container'>\n      <CategoryMenu />\n      <RecipeList />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useStoreContext } from '../utils/GlobalState';\nimport {\n  \n  UPDATE_RECIPES\n} from '../utils/actions';\nimport { QUERY_RECIPES } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentRecipe, setCurrentRecipe] = useState({});\n\n  const { loading, data } = useQuery(QUERY_RECIPES);\n\n  const { recipes } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (recipes.length) {\n      setCurrentRecipe(recipes.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_RECIPES,\n        recipes: data.recipes,\n      });\n\n      data.recipes.forEach((product) => {\n        idbPromise('recipes', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('recipes', 'get').then((indexedRecipes) => {\n        dispatch({\n          type: UPDATE_RECIPES,\n          recipes: indexedRecipes,\n        });\n      });\n    }\n  }, [recipes, data, loading, dispatch, id]);\n\n\n\n  return (\n    <>\n      {currentRecipe ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Recipes</Link>\n\n          <h2>{currentRecipe.name}</h2>\n\n          <p>{currentRecipe.description}</p>\n\n          <img\n            src={`/images/${currentRecipe.image}`}\n            alt={currentRecipe.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n//template for recipes\n// export const ADD_ORDER = gql`\n//   mutation addOrder($products: [ID]!) {\n//     addOrder(products: $products) {\n//       purchaseDate\n//       products {\n//         _id\n//         name\n//         description\n//         price\n//         quantity\n//         category {\n//           name\n//         }\n//       }\n//     }\n//   }\n// `;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/myRecipes\">\n              My Recipe\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🧑‍🍳🥘</span>\n          Pampered Pantry\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/recipes/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}